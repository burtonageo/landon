var N=null,E="",T="t",U="u",searchIndex={};
var R=["blender_armature","armaturesbyfilename","result","hashmap","flattenarmatureerror","try_from","try_into","borrow_mut","borrow","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","typeid","option","to_string","actionsettings","blenderarmature","keyframe","formatter","backtrace","serialize","deserialize","ActionSettings","InterpolationSettings","BlenderArmature","FlattenArmatureError","BlenderError","Keyframe","An error when trying to flatten your exported data across…","duplicates","blender_mesh","Something went wrong in the Blender child process that was…","Errors in Blender are written to stderr. We capture the…","Given a buffer of standard output from Blender we parse…","meshesbyfilename","flattenmesherror","blendermesh","as_fail","createsingleindexconfig","materialinput","CreateSingleIndexConfig","BlenderMesh","FlattenMeshError","MaterialInput"];
searchIndex["blender_armature"]={"doc":"Blender files can have armature such as circles, cubes,…","i":[[3,R[24],R[0],"Settings for your armature's current action and…",N,N],[12,"action_name",E,"The name of the action (animation) whose keyframes that…",0,N],[12,"start_time",E,"The time that this action started. By comparing…",0,N],[12,"should_loop",E,"Whether or not the action should loop if `current_time` -…",0,N],[3,R[25],E,"Settings for how to interpolate your BlenderArmature's…",N,N],[12,"current_time",E,"The current time will get compared to the start time of…",1,N],[12,"joint_indices",E,"The joints that you want to interpolate. To interpolate…",1,N],[12,"blend_fn",E,"Your blend_fn returns a number between `0.0` and `1.0`.…",1,N],[12,"current_action",E,"Settings for the current action (animation) of this…",1,N],[12,"previous_action",E,"Optional settings for the previous action of this…",1,N],[3,R[26],E,"All of the data about a Blender armature that we've…",N,N],[12,"joint_index",E,E,2,N],[12,"inverse_bind_poses",E,E,2,N],[12,"actions",E,E,2,N],[3,R[29],E,"The pose bones at an individual keyframe time",N,N],[4,R[27],E,R[30],N,N],[13,"DuplicateArmatureNamesAcrossFiles",E,E,3,N],[12,R[31],"blender_armature::FlattenArmatureError",E,3,N],[4,R[28],R[0],R[33],N,N],[13,"Stderr",E,R[34],4,N],[4,"Bone",E,"A bone in an armature. Can either be a dual quaternion or…",N,N],[13,"Matrix",E,E,5,N],[13,"DualQuat",E,E,5,N],[5,"parse_armatures_from_blender_stdout",E,R[35],N,[[["str"]],[[R[1]],["error"],[R[2],[R[1],"error"]]]]],[5,"flatten_exported_armatures",E,"Convert ArmatureeshByFilename into a HashMap<ArmatureName,…",N,[[[R[1]]],[[R[3],["str",R[18]]],[R[4]],[R[2],[R[3],R[4]]]]]],[11,"matrix_to_dual_quat",E,"Convert a matrix into a dual quaternion…",2,[[["bone"]],["bone"]]],[11,"dual_quat_to_matrix",E,"…",2,[[["bone"]],["bone"]]],[11,"new",E,"Creates new action settings for a specified action name",0,[[["f32"],["str"],["bool"]],[R[17]]]],[11,"interpolate_bones",E,"Interpolate in between the keyframes of your…",2,[[["self"],["interpolationsettings"]],[["u8"],["bone"],[R[3],["u8","bone"]]]]],[6,"ArmaturesByFilename",E,E,N,N],[6,"ArmaturesByArmatureName",E,E,N,N],[11,"apply_inverse_bind_poses",E,"Iterate over all of the action bones and apply and…",2,[[["self"]]]],[11,"transpose_actions",E,"Tranpose all of the bone matrices in our armature's action…",2,[[["self"]]]],[11,"actions_to_dual_quats",E,"Convert your action matrices into dual quaternions so that…",2,[[["self"]]]],[11,"as_slice",E,"Get a slice representation of you bone data",5,[[["self"]]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[5],E,E,0,[[[U]],[R[2]]]],[11,R[6],E,E,0,[[],[R[2]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[R[15]]]],[11,R[11],E,E,0,[[["self"]],["bool"]]],[11,R[12],E,E,0,[[["self"]],["ss"]]],[11,R[13],E,E,0,[[["ss"]],["sp"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[[U]],[R[2]]]],[11,R[6],E,E,1,[[],[R[2]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[R[15]]]],[11,R[11],E,E,1,[[["self"]],["bool"]]],[11,R[12],E,E,1,[[["self"]],["ss"]]],[11,R[13],E,E,1,[[["ss"]],["sp"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[5],E,E,2,[[[U]],[R[2]]]],[11,R[6],E,E,2,[[],[R[2]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[R[15]]]],[11,R[11],E,E,2,[[["self"]],["bool"]]],[11,R[12],E,E,2,[[["self"]],["ss"]]],[11,R[13],E,E,2,[[["ss"]],["sp"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[5],E,E,6,[[[U]],[R[2]]]],[11,R[6],E,E,6,[[],[R[2]]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[T]]],[11,R[9],E,E,6,[[["self"]],[R[14]]]],[11,R[10],E,E,6,[[["self"]],[R[15]]]],[11,R[11],E,E,6,[[["self"]],["bool"]]],[11,R[12],E,E,6,[[["self"]],["ss"]]],[11,R[13],E,E,6,[[["ss"]],["sp"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[16],E,E,3,[[["self"]],["string"]]],[11,R[5],E,E,3,[[[U]],[R[2]]]],[11,R[6],E,E,3,[[],[R[2]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[14]]]],[11,R[39],E,E,3,[[["self"]],["fail"]]],[11,R[10],E,E,3,[[["self"]],[R[15]]]],[11,R[11],E,E,3,[[["self"]],["bool"]]],[11,R[12],E,E,3,[[["self"]],["ss"]]],[11,R[13],E,E,3,[[["ss"]],["sp"]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[16],E,E,4,[[["self"]],["string"]]],[11,R[5],E,E,4,[[[U]],[R[2]]]],[11,R[6],E,E,4,[[],[R[2]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[14]]]],[11,R[39],E,E,4,[[["self"]],["fail"]]],[11,R[10],E,E,4,[[["self"]],[R[15]]]],[11,R[11],E,E,4,[[["self"]],["bool"]]],[11,R[12],E,E,4,[[["self"]],["ss"]]],[11,R[13],E,E,4,[[["ss"]],["sp"]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[5],E,E,5,[[[U]],[R[2]]]],[11,R[6],E,E,5,[[],[R[2]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[14]]]],[11,R[10],E,E,5,[[["self"]],[R[15]]]],[11,R[11],E,E,5,[[["self"]],["bool"]]],[11,R[12],E,E,5,[[["self"]],["ss"]]],[11,R[13],E,E,5,[[["ss"]],["sp"]]],[11,"clone",E,E,0,[[["self"]],[R[17]]]],[11,"eq",E,E,5,[[["self"],["bone"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["bone"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[18]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[18]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[19]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[19]]],["bool"]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[2]]]],[11,"name",E,E,3,[[["self"]],[[R[15],["str"]],["str"]]]],[11,"cause",E,E,3,[[["self"]],[["fail"],[R[15],["fail"]]]]],[11,R[21],E,E,3,[[["self"]],[[R[15],[R[21]]],[R[21]]]]],[11,"name",E,E,4,[[["self"]],[[R[15],["str"]],["str"]]]],[11,"cause",E,E,4,[[["self"]],[["fail"],[R[15],["fail"]]]]],[11,R[21],E,E,4,[[["self"]],[[R[15],[R[21]]],[R[21]]]]],[11,R[22],E,E,5,[[["self"],["__s"]],[R[2]]]],[11,R[22],E,E,2,[[["self"],["__s"]],[R[2]]]],[11,R[22],E,E,6,[[["self"],["__s"]],[R[2]]]],[11,R[23],E,E,5,[[["__d"]],[R[2]]]],[11,R[23],E,E,2,[[["__d"]],[R[2]]]],[11,R[23],E,E,6,[[["__d"]],[R[2]]]]],"p":[[3,R[24]],[3,R[25]],[3,R[26]],[4,R[27]],[4,R[28]],[4,"Bone"],[3,R[29]]]};
searchIndex["blender_mesh"]={"doc":"Blender files can have meshes such as circles, cubes,…","i":[[3,R[42],R[32],"Configuration for combining multiple indices into a single…",N,N],[12,"bone_influences_per_vertex",E,"The number of bones that influence each vertex.",0,N],[12,"calculate_vertex_tangents",E,"Whether or not to calculate the tangents for each vertex.",0,N],[3,R[43],E,"All of the data about a Blender mesh",N,N],[12,"vertex_positions",E,"All of the mesh's vertices. Three items in the vector make…",1,N],[12,"vertex_position_indices",E,"The indices within vertex positions that make up each…",1,N],[12,"num_vertices_in_each_face",E,"TODO: enum..? if they're all equal we replace the…",1,N],[12,"vertex_normals",E,E,1,N],[12,"vertex_normal_indices",E,E,1,N],[12,"vertex_uvs",E,"If your mesh is textured these will be all of the mesh's…",1,N],[12,"vertex_uv_indices",E,E,1,N],[12,"armature_name",E,E,1,N],[12,"vertex_group_indices",E,"TODO: When we move to single index triangulate and add new…",1,N],[12,"vertex_group_weights",E,E,1,N],[12,"bounding_box",E,E,1,N],[4,R[44],E,R[30],N,N],[13,"DuplicateMeshNamesAcrossFiles",E,E,2,N],[12,R[31],"blender_mesh::FlattenMeshError",E,2,N],[4,"Channel",R[32],"An individual channel within an image. Red, Green, or Blue.",N,N],[13,"Red",E,E,3,N],[13,"Green",E,E,3,N],[13,"Blue",E,E,3,N],[4,R[45],E,"An input to a material property.",N,N],[13,"Uniform",E,"Some value that is uniform across all vertices / fragments…",4,N],[13,"ImageTexture",E,"The name of the texture image (excluding the full path)…",4,N],[4,R[28],E,R[33],N,N],[13,"Stderr",E,R[34],5,N],[5,"parse_meshes_from_blender_stdout",E,R[35],N,[[["str"]],[[R[36]],["error"],[R[2],[R[36],"error"]]]]],[5,"flatten_exported_meshes",E,"Convert MesheshByFilename into a HashMap<MeshName,…",N,[[[R[36]]],[[R[2],[R[3],R[37]]],[R[3],["str",R[38]]],[R[37]]]]],[11,"combine_vertex_indices",E,"We export our models with indices for positions, normals…",1,[[["self"],[R[40]]]]],[11,"materials",E,"Get the materials for this mesh, indexed by their name",1,[[["self"]],[R[3]]]],[11,"vertex_tangents",E,"Get the tangent vector for each vertex",1,[[["self"]],[["vec"],[R[15],["vec"]]]]],[11,"triangulate",E,"When exporting a mesh from Blender, faces will usually…",1,[[["self"]]]],[11,"y_up",E,"Blender meshes get exported with a Z up coordinate system.…",1,[[["self"]]]],[6,"MeshesByFilename",E,E,N,N],[6,"MeshesByMeshName",E,E,N,N],[11,"from_json",E,E,1,[[["str"]],[[R[2],[R[38],"error"]],[R[38]],["error"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[5],E,E,0,[[[U]],[R[2]]]],[11,R[6],E,E,0,[[],[R[2]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[R[15]]]],[11,R[11],E,E,0,[[["self"]],["bool"]]],[11,R[12],E,E,0,[[["self"]],["ss"]]],[11,R[13],E,E,0,[[["ss"]],["sp"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[[U]],[R[2]]]],[11,R[6],E,E,1,[[],[R[2]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[R[15]]]],[11,R[11],E,E,1,[[["self"]],["bool"]]],[11,R[12],E,E,1,[[["self"]],["ss"]]],[11,R[13],E,E,1,[[["ss"]],["sp"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[16],E,E,2,[[["self"]],["string"]]],[11,R[5],E,E,2,[[[U]],[R[2]]]],[11,R[6],E,E,2,[[],[R[2]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[14]]]],[11,R[39],E,E,2,[[["self"]],["fail"]]],[11,R[10],E,E,2,[[["self"]],[R[15]]]],[11,R[11],E,E,2,[[["self"]],["bool"]]],[11,R[12],E,E,2,[[["self"]],["ss"]]],[11,R[13],E,E,2,[[["ss"]],["sp"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[5],E,E,3,[[[U]],[R[2]]]],[11,R[6],E,E,3,[[],[R[2]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[14]]]],[11,R[10],E,E,3,[[["self"]],[R[15]]]],[11,R[11],E,E,3,[[["self"]],["bool"]]],[11,R[12],E,E,3,[[["self"]],["ss"]]],[11,R[13],E,E,3,[[["ss"]],["sp"]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[5],E,E,4,[[[U]],[R[2]]]],[11,R[6],E,E,4,[[],[R[2]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[14]]]],[11,R[10],E,E,4,[[["self"]],[R[15]]]],[11,R[11],E,E,4,[[["self"]],["bool"]]],[11,R[12],E,E,4,[[["self"]],["ss"]]],[11,R[13],E,E,4,[[["ss"]],["sp"]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[16],E,E,5,[[["self"]],["string"]]],[11,R[5],E,E,5,[[[U]],[R[2]]]],[11,R[6],E,E,5,[[],[R[2]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[14]]]],[11,R[39],E,E,5,[[["self"]],["fail"]]],[11,R[10],E,E,5,[[["self"]],[R[15]]]],[11,R[11],E,E,5,[[["self"]],["bool"]]],[11,R[12],E,E,5,[[["self"]],["ss"]]],[11,R[13],E,E,5,[[["ss"]],["sp"]]],[11,"default",E,E,0,[[],[R[40]]]],[11,"default",E,E,4,[[],["self"]]],[11,"eq",E,E,4,[[["self"],[R[41]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[41]]],["bool"]]],[11,"eq",E,E,3,[[["self"],["channel"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[2]]]],[11,"name",E,E,2,[[["self"]],[[R[15],["str"]],["str"]]]],[11,"cause",E,E,2,[[["self"]],[["fail"],[R[15],["fail"]]]]],[11,R[21],E,E,2,[[["self"]],[[R[15],[R[21]]],[R[21]]]]],[11,"name",E,E,5,[[["self"]],[[R[15],["str"]],["str"]]]],[11,"cause",E,E,5,[[["self"]],[["fail"],[R[15],["fail"]]]]],[11,R[21],E,E,5,[[["self"]],[[R[15],[R[21]]],[R[21]]]]],[11,R[22],E,E,4,[[["self"],["__s"]],[R[2]]]],[11,R[22],E,E,3,[[["self"],["__s"]],[R[2]]]],[11,R[22],E,E,1,[[["self"],["__s"]],[R[2]]]],[11,R[23],E,E,4,[[["__d"]],[R[2]]]],[11,R[23],E,E,3,[[["__d"]],[R[2]]]],[11,R[23],E,E,1,[[["__d"]],[R[2]]]]],"p":[[3,R[42]],[3,R[43]],[4,R[44]],[4,"Channel"],[4,R[45]],[4,R[28]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);